/*
  Copyright (C) 2020 by Ligius

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

static const int nexus_nrtests = 11;
static const struct raw_t nexus_tests[] = {
    {   // fails at validate() - message too short
        "4502 512 4490 511 4352 478 4322 516 4542 468 4589 466 4467 615 2975 4613 4438 482 4404 495 4414 501 4430 456 4434 466 956 430 966 487 1018 465 1013 468 1034 469 3296 6709",
        "",
        NULL,
        -1
    },
    {   // fails at validate() - start bit is does not start with a short pulse
        "1000 1938 506 959 505 961 506 958 506 1938 505 1939 490 975 490 1954 489 976 490 974 490 975 490 975 490 975 490 975 490 974 490 976 488 1940 505 1939 504 1940 505 960 505 1939 505 1939 491 974 489 975 490 1955 490 1938 505 1940 505 1939 504 961 503 1940 507 958 504 960 507 959 504 961 504 961 504 960 505 3882",
        "",
        NULL,
        -1
    },
    {   // fails at validate() - end bit is does not start with a short pulse
        "498 1938 506 959 505 961 506 958 506 1938 505 1939 490 975 490 1954 489 976 490 974 490 975 490 975 490 975 490 975 490 974 490 976 488 1940 505 1939 504 1940 505 960 505 1939 505 1939 491 974 489 975 490 1955 490 1938 505 1940 505 1939 504 961 503 1940 507 958 504 960 507 959 504 961 504 961 504 960 1000 3882",
        "",
        NULL,
        -1
    },
    {   // passes validate but fails during parseCode - but has invalid pulse lengths
        "500 1953 475 1273 2067 587 4725 506 2563 390 107 143 410 155 138 869 81 847 91 85 273 242 1419 331 643 92 644 291 120 94 646 190 1063 160 315 107 145 110 585 622 142 131 122 353 107 195 172 81 446 1024 862 163 122 104 180 278 621 535 82 1038 120 1128 3065 213 1063 281 82 2093 995 124 1879 555 204 209 134 1555 192 104 707 84 220 170 139 156 120 1151 86 10356",
        "",
        NULL,
        0
    },
    {   // passes validate but fails during parseCode - bit[9] is not 0
        // bit 0                                                                        9                                                                                                                            24       25      26      27                                                                35
        "498 1938 506 959 505 961 506 958 506 1938 505 1939 490 975 490 1954 489 976 490 1974 490 975 490 975 490 975 490 975 490 974 490 976 488 1940 505 1939 504 1940 505 960 505 1939 505 1939 491 974 489 975 490 1955 490 1938 505 1940 505 1939 504 961 503 1940 507 958 504 960 507 959 504 961 504 961 504 960 505 3882",
        "",
        NULL,
        0
    },
    {   // passes validate but fails during parseCode - bit[25] is not 0
        // bit 0                                                                        9                                                                                                                            24       25      26      27                                                                35
        "498 1938 506 959 505 961 506 958 506 1938 505 1939 490 975 490 1954 489 976 490 974 490 975 490 975 490 975 490 975 490 974 490 976 488 1940 505 1939 504 1940 505 960 505 1939 505 1939 491 974 489 975 490 1955 490 938 505 1940 505 1939 504 961 503 1940 507 958 504 960 507 959 504 961 504 961 504 960 505 3882",
        "",
        NULL,
        0
    },
    {
        "498 1938 506 959 505 961 506 958 506 1938 505 1939 490 975 490 1954 489 976 490 974 490 975 490 975 490 975 490 975 490 974 490 976 488 1940 505 1939 504 1940 505 960 505 1939 505 1939 491 974 489 975 490 1955 490 1938 505 1940 505 1939 504 961 503 1940 507 958 504 960 507 959 504 961 504 961 504 960 505 3882",
        "{\"id\":141,\"channel\":0,\"temperature\":23.6,\"humidity\":64.0,\"battery\":0}",
        NULL,
        0
    },
    {
        "499 1951 492 973 491 973 491 1951 490 975 489 975 490 1951 492 973 491 972 491 974 505 960 504 960 503 960 504 961 504 959 504 959 506 1937 505 1938 507 1936 505 959 505 1937 506 958 506 957 507 957 507 1937 504 1939 504 1936 508 1936 506 958 507 957 507 1935 507 1935 508 1936 493 1948 494 970 494 1949 494 83",
        "{\"id\":146,\"channel\":0,\"temperature\":23.2,\"humidity\":61.0,\"battery\":0}",
        NULL,
        0
    },
    {   // has two sequences, only the first one will get parsed
        "500 1935 506 959 507 972 490 1937 506 973 492 973 491 1936 507 972 491 973 491 973 492 972 491 973 492 973 489 975 505 959 504 959 506 1937 506 1937 491 1952 490 974 490 1952 490 975 490 974 489 974 506 1937 491 1953 490 1951 490 1938 506 974 489 974 490 1952 491 1937 506 1937 506 1937 505 958 507 1936 506 3894 499 1936 508 956 507 957 507 1935 508 957 505 959 506 1936 507 958 505 959 506 958 505 974 491 972 492 972 491 974 490 974 490 974 505 1938 489 1954 489 1953 491 972 492 1952 490 974 490 974 489 975 490 1953 489 1953 490 1938 505 1937 506 958 505 960 504 1938 506 1937 505 1937 506 1937 505 959 505 1938 505 3894 499 1936 508 957 505 958 507 1937 505 958 507 958 505 1936 507 958 505 959 506 958 506 958 505 959 506 973 490 975 489 974 490 975 489 1953 490 1953 490 1937 505 960 504 1938 505 959 504 975 490 974 490 1938 504 1938 505 1938 505 1937 505 960 505 959 505 1938 504 1938 505 1938 504 1939 504 959 505 1938 145 81 102 85 11559",
        "{\"id\":146,\"channel\":0,\"temperature\":23.2,\"humidity\":61.0,\"battery\":0}",
        NULL,
        0
    },
    {
        // from a forum post
        "428 1048 404 2024 408 2028 408 1072 388 1076 384 1076 388 1088 376 2056 400 2032 404 1068 392 1076 388 2040 396 1076 388 1080 384 1084 376 1100 364 2064 396 2040 392 1072 392 1076 388 1076 384 1084 380 1088 376 1084 380 2060 396 2040 396 2036 400 2056 396 1076 384 1072 388 2056 384 2056 396 1064 396 1312 388 1084 380 1088 376 3898",
        "{\"id\":97,\"channel\":1,\"temperature\":19.2,\"humidity\":48.0,\"battery\":1}",
        NULL,
        0
    },
    {
        // from another forum post
        "404 2044 384 1096 364 1140 336 2064 368 1088 372 1092 360 2132 308 1096 356 1128 364 1124 312 1128 332 1160 328 1132 308 1168 304 1180 288 1128 344 2088 380 1092 360 2080 352 2112 340 2056 372 1116 332 1136 344 1112 328 2140 344 2088 380 2056 352 2032 416 1096 348 2100 332 1096 384 1112 328 1128 328 1196 296 1100 356 1116 372 4004",
        "{\"id\":146,\"channel\":0,\"temperature\":18.4,\"humidity\":64.0,\"battery\":0}",
        NULL,
        0
    },
};
